// Include packages needed for this application
const inquirer = require('inquirer');
const fs = require('fs')
const generateMarkdown = require('./utils/generateMarkdown')

// Create an array of questions for user input
const questions = [
  {
    type: 'input',
    message: 'Enter repo title.',
    name: 'title',
    filter(val) {
      return val.trim()
    }
  },
  {
    type: 'input',
    message: 'Enter description. Use \<br\> for line breaks.',
    name: 'description',
    filter(val) {
      return val.trim()
    }
  },
  {
    type: 'input',
    message: 'Enter installation instructions.  Use \<br\> for line breaks.',
    name: 'installation',
    filter(val) {
      return val.trim()
    }
  },
  {
    type: 'input',
    message: 'Enter usage information.  Use \<br\> for line breaks.',
    name: 'usage',
    filter(val) {
      return val.trim()
    }
  },
  {
    type: 'input',
    message: 'Enter contribution guidelines.  Use \<br\> for line breaks.',
    name: 'contributing',
    filter(val) {
      return val.trim()
    }
  },
  {
    type: 'input',
    message: 'Enter test instructions.  Use \<br\> for line breaks.',
    name: 'tests',
    filter(val) {
      return val.trim()
    }
  },
  {
    type:'list',
    message: 'Choose a license for your application.',
    name: 'license',
    choices: [
      'The MIT License',
      'Mozilla Public License 2.0',
      'IBM Public License Version 1.0',
      'Eclipse Public License 1.0',
      'ISC License (ISC)',
      'no license'
    ]
  },
  {
    type: 'input',
    message: 'What is your Github username?',
    name: 'username',
    filter(val) {
      return val.trim()
    },
    validate(val) {
      const usernamePattern = /^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$/i;
      if (usernamePattern.test(val)) {
        return true
      }
      return "Please enter a valid username."
    }
  },
  {
    type: 'input',
    message: 'What email address do you want to include in the readme?',
    name: 'email',
    filter(val) {
      return val.trim()
    },
    validate(val) {
      const emailPattern = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+/;
      if (emailPattern.test(val)) {
        return true
      }
      return "Please enter a valid email address."
    }
  }
];

/**
 * Writes README file to the directory generated-files
 * @param {String} fileName - the name of the file to save
 * @param {Object} data - the data generated by the Inquirer prompts
 */
function writeToFile(fileName, data) {
  fs.writeFile(`./generated-files/${fileName}.md`,generateMarkdown(data), function (err) {
    if (err) {
      console.log("An error occured while writing data to file.");
      return console.log(err);
    }
    console.log(`${fileName}.md has been saved.`);
    });
}

/**
 * Reformats the title to be a markdown filename.  This way different projects won't be saved with the same name.
 * @param {String} title 
 */
function titleFileName(title) {

  let fileName = title.trim()
    .replace(/\s+/g, '-')    // Replace spaces with hyphens
    .replace(/[^\w-]/g, '')  // Remove special characters except hyphens and underscores
    .toLowerCase();

  return fileName;
}

/**
 * Initializes app
 */
function init() {

  inquirer.prompt(questions).then((answers) => {
    writeToFile(titleFileName(answers.title), answers);
  });

}

// Function call to initialize app
init();